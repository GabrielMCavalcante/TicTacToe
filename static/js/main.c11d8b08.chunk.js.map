{"version":3,"sources":["components/Header/index.tsx","components/Footer/index.tsx","store/actions/actionTypes.js","store/actions/menu.js","components/UI/Controls/Control/index.tsx","components/UI/Controls/index.tsx","containers/Menu/index.tsx","store/actions/tableTile.js","store/actions/global.js","components/TableTile/index.tsx","containers/GameTable/index.tsx","store/actions/gameConfig.js","components/UI/Togglers/index.tsx","containers/PvpConfig/index.tsx","store/actions/selector.js","components/UI/Selector/index.tsx","containers/PveConfig/index.tsx","store/actions/game.js","containers/Game/index.tsx","containers/GameResults/index.tsx","containers/App.tsx","serviceWorker.ts","store/reducers/game-logic.js","store/createStore.js","index.tsx"],"names":["Header","className","Footer","actions","type","ActionTypes","config","gameState","dispatch","Control","props","onClick","onclick","name","Controls","controls","i","numberOfControls","push","key","controlConfig","connect","onPvp","onPve","history","length","newTile","newGamestate","played","state","currentTile","freeTiles","placedTiles","onTileClick","tileId","onPlayerPlayed","global","tileRef","useRef","classes","setElContent","content","el","current","classList","contains","innerHTML","undefined","find","id","thisTile","forEach","tile","ref","onMouseEnter","onMouseLeave","join","GameTable","tiles","firstRow","secondRow","thirdRow","gameConfig","Togglers","toggler1Ref","toggler2Ref","toggleRef","reference","method","otherId","add","remove","togglerConfig","toggleHandler","useEffect","defaultSelected","onGameStart","onReturnToMenu","currentPlayer","gotoMenu","firstConfig","playWithConfig","optionsConfig","firstPlayer","firstTile","diff","onApplyDifficulty","options","defaultValue","defaultOption","filter","option","value","useState","label","setLabel","setValue","openCaret","setOpenCaret","map","optionSelected","tie","onGameWon","onGameTied","onChangeTurn","scoreboard","difficulty","playerPlayed","onRestartGame","onPlaceTile","TileActions","gameOptionsConfig","verifyTurnShift","win","getFilled","checkTiles","includes","verifyRowCol","checkTileInc","loopLimit","loopInc","filled","equal","verifyDiagonal","diagonalTiles","verifySpecifiedWin","useCallback","player","filterFilled","tilesId","freetile","t","verifyPlay","Math","floor","random","tileIndex","diagTiles","playRandomly","randomTileIndex","playerTurn","loaded","onPlayAgain","onChangeGamestate","score1Ref","score2Ref","resultOptionsConfig","resetScores","identifier","players","localStorage","setItem","JSON","stringify","createScoreboard","currentScoreboard","getItem","parse","Object","values","showcasePlayers","resultMessage","App","exact","path","component","Menu","PvpConfig","PveConfig","Game","GameResults","to","Boolean","window","location","hostname","match","initialState","gameLogicReducer","action","updateState","oldState","newValues","startGame","endGame","resetGame","resetState","placeTile","updatedFreeTiles","changeType","changeDifficulty","changeTurn","nextPlayer","changeGamestate","changePlayerPlayed","composeEnhancers","composeWithDevTools","gameCreators","trace","traceLimit","store","createStore","GameLogicReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"klBAaeA,MARf,WACI,OACI,yBAAKC,UAAU,UACX,6C,cCWGC,MAXf,WACI,OACI,4BAAQD,UAAU,UACd,2BACI,kBAAC,IAAD,MACA,4D,OCbD,EACC,aADD,EAEC,aAFD,EAGD,WAHC,EASC,aATD,EAcE,cAdF,EAgBO,mBAhBP,EAiBE,cAjBF,EAmBE,cAnBF,EAqBQ,oBArBR,EAuBW,uBCrBpBE,EACM,iBAAO,CACXC,KAAMC,EACNC,OAAQ,CAAEF,KAAM,MAAOG,UAAW,eAHpCJ,EAMM,iBAAO,CACXC,KAAMC,EACNC,OAAQ,CAAEF,KAAM,MAAOG,UAAW,eAI3B,EACD,kBAAM,SAAAC,GAAQ,OAAIA,EAASL,OAD1B,EAED,kBAAM,SAAAK,GAAQ,OAAIA,EAASL,O,MCG1BM,MATf,SAAiBC,GACb,OACI,4BACIT,UAAU,UACVU,QAASD,EAAME,SACjBF,EAAMG,O,MCsBDC,MArBf,SAAkBJ,GAId,IAFA,IAAMK,EAA0B,GAEvBC,EAAI,EAAGA,EAAIN,EAAMO,iBAAkBD,IACxCD,EAASG,KACL,kBAAC,EAAD,CACIC,IAAKH,EACLH,KAAMH,EAAMU,cAAcJ,GAAGH,KAC7BD,QAASF,EAAMU,cAAcJ,GAAGJ,WAK5C,OACI,yBAAKX,UAAU,YACVc,I,MCSEM,kBAAQ,MAPvB,SAA4Bb,GACxB,MAAO,CACHc,MAAO,kBAAMd,EAASL,MACtBoB,MAAO,kBAAMf,EAASL,SAIfkB,EA3Bf,SAAcX,GAEV,IAAMJ,EAAS,CACX,CAAEO,KAAM,mBAAoBD,QAAS,WACjCF,EAAMY,QACNZ,EAAMc,QAAQN,KAAK,UAEvB,CAAEL,KAAM,qBAAsBD,QAAS,WACnCF,EAAMa,QACNb,EAAMc,QAAQN,KAAK,WAI3B,OACI,yBAAKjB,UAAU,QACX,kBAAC,EAAD,CAAUgB,iBAAkBX,EAAOmB,OAAQL,cAAed,QC3BhEH,G,MACS,SAAAuB,GAAO,MAAK,CAAEtB,KAAMC,EAAwBqB,aAG5C,EACA,SAAAA,GAAO,OAAI,SAAAlB,GAAQ,OAAIA,EAASL,EAAkBuB,MCL3DvB,EACW,iBAAO,CAAEC,KAAMC,IAD1BF,EAEU,iBAAO,CAAEC,KAAMC,IAFzBF,EAGe,SAAAwB,GAAY,MAAK,CAAEvB,KAAMC,EAA8BsB,iBAHtExB,EAIkB,SAAAyB,GAAM,MAAK,CAAExB,KAAMC,EAAkCuB,WAG9D,EACA,kBAAM,SAAApB,GAAQ,OAAIA,EAASL,OAD3B,EAEK,kBAAM,SAAAK,GAAQ,OAAIA,EAASL,OAFhC,EAGQ,SAAAwB,GAAY,OAAI,SAAAnB,GAAQ,OAAIA,EAASL,EAAwBwB,MAHrE,EAIW,SAAAC,GAAM,OAAI,SAAApB,GAAQ,OAAIA,EAASL,EAA2ByB,MCiErEP,mBAhBf,SAAyBQ,GACrB,MAAO,CACHtB,UAAWsB,EAAMtB,UACjBuB,YAAaD,EAAMC,YACnBC,UAAWF,EAAME,UACjBC,YAAaH,EAAMG,gBAI3B,SAA4BxB,GACxB,MAAO,CACHyB,YAAa,SAACC,GAAD,OAAoB1B,EAASL,EAAkB+B,KAC5DC,eAAgB,SAACP,GAAD,OAAqBpB,EAAS4B,EAA4BR,QAInEP,EA/Df,SAAmBX,GAEf,IAAM2B,EAAUC,iBAAO,MAEjBC,EAAU,CAAC,aAgBjB,SAASC,EAAaC,GAClB,GAAwB,YAApB/B,EAAMH,UAAyB,CAC/B,IAAMmC,EAAKL,EAAQM,QACfD,EAAGE,UAAUC,SAAS,eACtBH,EAAGI,UAAYL,IAlBH,YAApB/B,EAAMH,gBACwDwC,IAA1DrC,EAAMqB,UAAUiB,MAAK,SAACN,GAAD,OAAgBA,IAAOhC,EAAMuC,OAClDV,EAAQrB,KAAK,aAqBrB,IAAIgC,EAAW,GAOf,OALAxC,EAAMsB,YAAYmB,SAAQ,SAACC,GACnBA,EAAKH,KAAOvC,EAAMuC,KAClBC,EAAWE,EAAKA,SAIpB,yBACIC,IAAKhB,EACLiB,aAAc,kBAAMd,EAAa9B,EAAMoB,cACvCyB,aAAc,kBAAMf,EAAa,KACjC7B,QA/BR,WAC4B,YAApBD,EAAMH,WACK8B,EAAQM,QACZC,UAAUC,SAAS,eACtBnC,EAAMuB,YAAY,CAAEgB,GAAIvC,EAAMuC,GAAIG,KAAM1C,EAAMoB,cAC9CpB,EAAMyB,gBAAe,KA2BzBlC,UAAWsC,EAAQiB,KAAK,MAC1BN,M,MC5BKO,MAtBf,WAGI,IADA,IAAMC,EAAuB,GACpB1C,EAAI,EAAGA,EAAI,EAAGA,IACnB0C,EAAMxC,KACF,kBAAC,EAAD,CAAWC,IAAKH,EAAGiC,GAAIjC,KAI/B,IAAM2C,EAAW,CAACD,EAAM,GAAIA,EAAM,GAAIA,EAAM,IACtCE,EAAY,CAACF,EAAM,GAAIA,EAAM,GAAIA,EAAM,IACvCG,EAAW,CAACH,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAE5C,OACI,yBAAKzD,UAAU,aACX,yBAAKA,UAAU,YAAa0D,GAC5B,yBAAK1D,UAAU,YAAa2D,GAC5B,yBAAK3D,UAAU,YAAa4D,KCvBlC1D,EACa,SAAAG,GAAM,MAAK,CAAEF,KAAMC,EAAwByD,WAAYxD,IAG3D,EACM,SAAAA,GAAM,OAAI,SAAAE,GAAQ,OAAIA,EAASL,EAAsBG,M,MCsD3DyD,MA9Cf,SAAkBrD,GAEd,IAAMsD,EAAc1B,iBAAO,MACrB2B,EAAc3B,iBAAO,MAE3B,SAAS4B,EAAUC,EAAyCC,EAAgBC,GACxE,IAAM3B,EAAKyB,EAAUxB,QACP,QAAXyB,EAAkB1B,EAAGE,UAAU0B,IAAI,UACjC5B,EAAGE,UAAU2B,OAAO,UACzB7D,EAAM8D,cAAcH,GAASzD,UAGjC,SAAS6D,EAAcN,GAInB,OAHoBA,EAAUxB,QAClBC,UAAU0B,IAAI,UAElBH,GACJ,KAAKH,EAAa,OAAOE,EAAUD,EAAa,SAAU,GAC1D,KAAKA,EAAa,OAAOC,EAAUF,EAAa,SAAU,IAWlE,OAPAU,qBAAU,WACN,OAAQhE,EAAMiE,iBACV,IAAK,QAAS,OAAOT,EAAUF,EAAa,MAAO,GACnD,IAAK,SAAU,OAAOE,EAAUD,EAAa,MAAO,MAEzD,CAACvD,EAAMiE,kBAGN,yBAAK1E,UAAU,YACX,4BACIoD,IAAKW,EACL/D,UAAU,UACVU,QAAS,kBAAM8D,EAAcT,KAC/BtD,EAAM8D,cAAc,GAAG3D,MAEzB,4BACIwC,IAAKY,EACLhE,UAAU,UACVU,QAAS,kBAAM8D,EAAcR,KAC/BvD,EAAM8D,cAAc,GAAG3D,Q,MCuCtBQ,mBAdf,SAAyBQ,GACrB,MAAO,CACHtB,UAAWsB,EAAMtB,UACjBH,KAAMyB,EAAMzB,SAIpB,SAA4BI,GACxB,MAAO,CACHoE,YAAa,SAACtE,GAAD,OAAiBE,EAASL,EAAwBG,KAC/DuE,eAAgB,kBAAMrE,EAAS4B,SAIxBf,EA5Ef,SAAmBX,GAEf,IAAIoE,EAAgB,UAChBhD,EAAc,IAElB,SAASiD,IACLrE,EAAMmE,iBACNnE,EAAMc,QAAQN,KAAK,KAGvBwD,qBAAU,WACkB,cAApBhE,EAAMH,WAA4C,QAAfG,EAAMN,MAAgB2E,MAC9D,IAEH,IAAMC,EAAc,CAChB,CAAEnE,KAAM,WAAYD,QAAS,kBAAMkE,EAAgB,YACnD,CAAEjE,KAAM,WAAYD,QAAS,kBAAMkE,EAAgB,aAGjDG,EAAiB,CACnB,CAAEpE,KAAM,IAAKD,QAAS,kBAAMkB,EAAc,MAC1C,CAAEjB,KAAM,IAAKD,QAAS,kBAAMkB,EAAc,OAGxCoD,EAAgB,CAClB,CAAErE,KAAM,aAAcD,QAI1B,WACIF,EAAMkE,YAAY,CACdE,gBACAhD,cACAqD,YAAaL,EACbM,UAAWtD,EACXvB,UAAW,YAEfG,EAAMc,QAAQN,KAAK,WAXnB,CAAEL,KAAM,iBAAkBD,QAASmE,IAcvC,OACI,yBAAK9E,UAAU,aACX,yBAAKA,UAAU,eACX,8CACA,kBAAC,EAAD,CAAUuE,cAAeQ,EAAaL,gBAAgB,WAG1D,yBAAK1E,UAAU,eACX,wCACA,kBAAC,EAAD,CAAUuE,cAAeS,EAAgBN,gBAAgB,WAG7D,yBAAK1E,UAAU,eACX,kBAAC,EAAD,CACIgB,iBAAkBiE,EAAczD,OAChCL,cAAe8D,S,OCxE7B/E,EACa,SAAAkF,GAAI,MAAK,CAAEjF,KAAMC,EAA+BgF,SAGpD,EACM,SAAAA,GAAI,OAAI,SAAA7E,GAAQ,OAAIA,EAASL,EAAsBkF,M,MCsEzDhE,mBAZf,SAAyBQ,GACrB,MAAO,CACHtB,UAAWsB,EAAMtB,cAIzB,SAA4BC,GACxB,MAAO,CACH8E,kBAAmB,SAACD,GAAD,OAAkB7E,EAASL,EAAwBkF,QAI/DhE,EAzDf,SAAkBX,GAAa,IAEnB6E,EAAwD7E,EAAxD6E,QAASC,EAA+C9E,EAA/C8E,aAAcjF,EAAiCG,EAAjCH,UAAW+E,EAAsB5E,EAAtB4E,kBAEpCG,EAAgBF,EACjBG,QAAO,SAACC,GAAD,OAAoBA,EAAOC,QAAUJ,KAAc,GALrC,EAOAK,mBAASJ,EAAcK,OAPvB,mBAOnBA,EAPmB,KAOZC,EAPY,OAQAF,mBAASJ,EAAcG,OARvB,mBAQnBA,EARmB,KAQZI,EARY,OASQH,oBAAS,GATjB,mBASnBI,EATmB,KASRC,EATQ,KAqB1B,OAVAxB,qBAAU,WACY,cAAdnE,GAA2B+E,GAAmBM,KACnD,CAACA,EAAOrF,IASP,yBAAKN,UAAU,YACX,yBAAKA,UAAU,WAAWU,QAAS,kBAAMuF,GAAcD,KAClDH,EACD,kBAAC,IAAD,OAGJ,yBAAK7F,UAAW,CAAC,UAAWgG,EAAY,OAAS,IAAIzC,KAAK,MAElD+B,EAAQY,KAAI,SAACR,GAAD,OACR,yBACIxE,IAAKwE,EAAOC,MACZ3F,UACI,CAAC,SAAU0F,EAAOC,QAAUA,GAAS,WAAWpC,KAAK,KAEzD7C,QAAS,kBArBjC,SAAwBgF,GACpBI,EAASJ,EAAOG,OAChBE,EAASL,EAAOC,OAChBM,GAAa,GAkBsBE,CAAeT,KAChCA,EAAOG,e,MCoDlBzE,mBAdf,SAAyBQ,GACrB,MAAO,CACHtB,UAAWsB,EAAMtB,UACjBH,KAAMyB,EAAMzB,SAIpB,SAA4BI,GACxB,MAAO,CACHoE,YAAa,SAACtE,GAAD,OAAiBE,EAASL,EAAwBG,KAC/DuE,eAAgB,kBAAMrE,EAAS4B,SAIxBf,EAzFf,SAAmBX,GAEf,IAAIoE,EAAgB,SAChBhD,EAAc,IAElB,SAASiD,IACLrE,EAAMmE,iBACNnE,EAAMc,QAAQN,KAAK,KAGvBwD,qBAAU,WACkB,cAApBhE,EAAMH,WAA4C,QAAfG,EAAMN,MAAgB2E,MAC9D,IAEH,IAAMC,EAAc,CAChB,CAAEnE,KAAM,SAAUD,QAAS,kBAAMkE,EAAgB,WACjD,CAAEjE,KAAM,WAAYD,QAAS,kBAAMkE,EAAgB,cAGjDG,EAAiB,CACnB,CAAEpE,KAAM,IAAKD,QAAS,kBAAMkB,EAAc,MAC1C,CAAEjB,KAAM,IAAKD,QAAS,kBAAMkB,EAAc,OAGxCoD,EAAgB,CAClB,CAAErE,KAAM,aAAcD,QAY1B,WACIF,EAAMkE,YAAY,CACdE,gBACAhD,cACAqD,YAAaL,EACbM,UAAWtD,EACXvB,UAAW,YAEfG,EAAMc,QAAQN,KAAK,WAnBnB,CAAEL,KAAM,iBAAkBD,QAASmE,IAsBvC,OACI,yBAAK9E,UAAU,aACX,yBAAKA,UAAU,eACX,8CACA,kBAAC,EAAD,CAAUuE,cAAeQ,EAAaL,gBAAgB,WAG1D,yBAAK1E,UAAU,eACX,wCACA,kBAAC,EAAD,CAAUuE,cAAeS,EAAgBN,gBAAgB,WAG7D,yBAAK1E,UAAU,eACX,gDACA,kBAAC,EAAD,CAAUsF,QAjCG,CACrB,CAAEO,MAAO,OAAQF,MAAO,QACxB,CAAEE,MAAO,SAAUF,MAAO,QAC1B,CAAEE,MAAO,OAAQF,MAAO,QACxB,CAAEE,MAAO,YAAaF,MAAO,QAC7B,CAAEE,MAAO,SAAUF,MAAO,SA4BmBJ,aAAa,UAGtD,yBAAKvF,UAAU,eACX,kBAAC,EAAD,CACIgB,iBAAkBiE,EAAczD,OAChCL,cAAe8D,S,QCtF7B/E,EACS,iBAAO,CAAEC,KAAMC,EAAsBgG,KAAK,IADnDlG,GAEU,iBAAO,CAAEC,KAAMC,EAAsBgG,KAAK,IAFpDlG,GAGY,iBAAO,CAAEC,KAAMC,IAGlB,IACXiG,UAAW,kBAAM,SAAA9F,GAAQ,OAAIA,EAASL,OACtCoG,WAAY,kBAAM,SAAA/F,GAAQ,OAAIA,EAASL,QACvCqG,aAAc,kBAAM,SAAAhG,GAAQ,OAAIA,EAASL,S,MCwR9BkB,IC9QXoF,GD8QWpF,gBAzBf,SAAyBQ,GACrB,MAAO,CACHtB,UAAWsB,EAAMtB,UACjBuE,cAAejD,EAAMiD,cACrBhD,YAAaD,EAAMC,YACnBE,YAAaH,EAAMG,YACnBD,UAAWF,EAAME,UACjB3B,KAAMyB,EAAMzB,KACZsG,WAAY7E,EAAM6E,WAClBC,aAAc9E,EAAM8E,iBAI5B,SAA4BnG,GACxB,MAAO,CACHqE,eAAgB,kBAAMrE,EAAS4B,MAC/BwE,cAAe,kBAAMpG,EAAS4B,MAC9BD,eAAgB,SAACP,GAAD,OAAqBpB,EAAS4B,EAA4BR,KAC1E4E,aAAc,kBAAMhG,EAASL,GAAQqG,iBACrCF,UAAW,kBAAM9F,EAASL,GAAQmG,cAClCC,WAAY,kBAAM/F,EAASL,GAAQoG,eACnCM,YAAa,SAAC3E,GAAD,OAAoB1B,EAASsG,EAAsB5E,QAIzDb,EAhRf,SAAcX,GAAa,IAGnBN,EAgBAM,EAhBAN,KACAoB,EAeAd,EAfAc,QACAO,EAcArB,EAdAqB,UACAuE,EAaA5F,EAbA4F,UACA/F,EAYAG,EAZAH,UACAmG,EAWAhG,EAXAgG,WACAH,EAUA7F,EAVA6F,WACAvE,EASAtB,EATAsB,YACAF,EAQApB,EARAoB,YACA+E,EAOAnG,EAPAmG,YACAF,EAMAjG,EANAiG,aACAH,EAKA9F,EALA8F,aACAI,EAIAlG,EAJAkG,cACA9B,EAGApE,EAHAoE,cACAD,EAEAnE,EAFAmE,eACA1C,EACAzB,EADAyB,eAGJ,SAAS4C,IACLF,IACArD,EAAQN,KAAK,KAGjB,IAAM6F,EAAoB,CACtB,CAAElG,KAAM,eAAgBD,QAASgG,GACjC,CAAE/F,KAAM,iBAAkBD,QAASmE,IAQvC,SAASiC,IACiB,aAAlBlC,EACI6B,IACAxE,GAAe,GACfqE,KAGHA,IAZT9B,qBAAU,WACY,YAAdnE,EAAyBiB,EAAQN,KAAK,iBACnB,YAAdX,GAAyBwE,MACnC,CAACxE,IAaJmE,qBAAU,WACN,GAAI1C,EAAYP,QAAU,EAAG,CACzB,IAAIwF,GAAM,EAEV,SAASC,EAAUC,GACf,OAAOnF,EAAY0D,QACf,SAACtC,GAAD,OAAwC+D,EAAWC,SAAShE,EAAKH,OAIzE,SAASoE,EAAaC,EAAsBC,EAAmBC,GAC3D,IAAK,IAAIxG,EAAI,EAAGA,EAAIuG,EAAWvG,GAAKwG,EAAS,CACzC,IAAMC,EAASP,EAAU,CAAClG,EAAGA,EAAIsG,EAActG,EAAK,EAAIsG,IAExD,GAAsB,IAAlBG,EAAOhG,OAAc,wBACrB,IAAM2D,EAAYqC,EAAO,GAAGrE,KAExBsE,EAAQ,EAMZ,GAJAD,EAAOtE,SAAQ,SAACC,GACRA,EAAKA,OAASgC,GAAWsC,OAGnB,IAAVA,EAEA,OADAT,GAAM,EACN,QAXiB,GAWjB,OAMhB,SAASU,EAAeC,GACpB,IAAMH,EAASP,EAAUU,GAEzB,GAAsB,IAAlBH,EAAOhG,OAAc,CACrB,IAAM2D,EAAYqC,EAAO,GAAGrE,KAExBsE,EAAQ,EAEZD,EAAOtE,SAAQ,SAACC,GACRA,EAAKA,OAASgC,GAAWsC,OAGnB,IAAVA,IAAaT,GAAM,IAK/BI,EAAa,EAAG,EAAG,GAGdJ,GAAKI,EAAa,EAAG,EAAG,GAGxBJ,GAAKU,EAAe,CAAC,EAAG,EAAG,IAG3BV,GAAKU,EAAe,CAAC,EAAG,EAAG,IAE5BV,EAAKX,IACuB,IAAvBtE,EAAYP,OAAc8E,IAC9BS,SAEFA,MACR,CAAChF,IAEJ,IAAM6F,EAAqBC,uBAAY,SAACC,GAEpC,IAEM7E,EAAW6E,IAAWjD,EAAgBhD,EAFV,MAAhBA,EAAsB,IAAM,IAI1CF,GAAS,EAEb,SAASoG,EAAaC,GAClB,IAAIC,EAAQ,YAAOD,GACnB,MAAO,CAACjG,EAAY0D,QAChB,SAACtC,GAEG,OADA8E,EAAWA,EAASxC,QAAO,SAAAyC,GAAC,OAAIA,IAAM/E,EAAKH,MACpCgF,EAAQb,SAAShE,EAAKH,OAElCiF,GAGP,SAASE,EAAWd,EAAsBC,EAAmBC,GACzD,IAAK,IAAIxG,EAAI,EAAGA,EAAIuG,EAAWvG,GAAKwG,EAAS,CAAC,IAAD,EACdQ,EAAa,CAAChH,EAAGA,EAAIsG,EAActG,EAAK,EAAIsG,IAD9B,mBAClCG,EADkC,KAC1BS,EAD0B,KAGzC,GAAsB,IAAlBT,EAAOhG,OAAc,wBACrB,IAAIiG,EAAQ,EAMZ,GAJAD,EAAOtE,SAAQ,SAACC,GACRA,EAAKA,OAASF,GAAUwE,OAGlB,IAAVA,GACIW,KAAKC,MAAsB,IAAhBD,KAAKE,WAAkC,KAAb7B,EAAmB,CACxD,IAAM8B,EAAYN,EAAS,GAG3B,OAFArB,EAAY,CAAE5D,GAAIuF,EAAWpF,KAAMtB,IACnCF,GAAS,EACT,SAZa,GAYb,OAOpB,SAAS+F,EAAec,GAAsB,IAAD,EACdT,EAAaS,GADC,mBAClChB,EADkC,KAC1BS,EAD0B,KAGzC,GAAsB,IAAlBT,EAAOhG,OAAc,CACrB,IAAIiG,EAAQ,EAMZ,GAJAD,EAAOtE,SAAQ,SAACC,GACRA,EAAKA,OAASF,GAAUwE,OAGlB,IAAVA,GACIW,KAAKC,MAAsB,IAAhBD,KAAKE,WAAkC,KAAb7B,EAAmB,CACxD,IAAM8B,EAAYN,EAAS,GAC3BrB,EAAY,CAAE5D,GAAIuF,EAAWpF,KAAMtB,IACnCF,GAAS,IAkBzB,OAXAwG,EAAW,EAAG,EAAG,GAGZxG,GAAQwG,EAAW,EAAG,EAAG,GAGzBxG,GAAQ+F,EAAe,CAAC,EAAG,EAAG,IAG9B/F,GAAQ+F,EAAe,CAAC,EAAG,EAAG,IAE5B/F,IACR,CAACI,EAAaF,IAEjB,SAAS4G,IACL,IAAMC,EAAkB5G,EAAUsG,KAAKC,MAAMD,KAAKE,SAAWxG,EAAUN,SACvEoF,EAAY,CAAE5D,GAAI0F,EAAiBvF,KAAMtB,IAI7C4C,qBAAU,WACN,GAAa,QAATtE,GAAoC,aAAlB0E,EAClB,GAAI9C,EAAYP,QAAU,EAAG,CACzB,IAAIG,EAASiG,EAAmB,YAE3BjG,IAEDA,EAASiG,EAAmB,YAEfa,SAEdA,MAEZ,CAAC5D,IAEJ,IAAI8D,EAAa,OAEjB,OAAQlI,EAAMoE,eACV,IAAK,UAEG8D,EAAa,WACb,MAER,IAAK,UAEGA,EAAa,WACb,MAER,IAAK,WAEGA,EAAa,WACb,MAER,QAASA,EAAa,OAG1B,OACI,yBAAK3I,UAAU,QACX,yBAAKA,UAAU,YACX,2BAAI2I,EAAJ,WAAwBlI,EAAMoB,cAGlC,yBAAK7B,UAAU,eACX,kBAAC,EAAD,CACIgB,iBAAkB8F,EAAkBtF,OACpCL,cAAe2F,S,iBC7O/B8B,I,OAAS,GAwKExH,oBAjBf,SAAyBQ,GACrB,MAAO,CACHiD,cAAejD,EAAMiD,cACrB1E,KAAMyB,EAAMzB,KACZG,UAAWsB,EAAMtB,UACjB8F,IAAKxE,EAAMwE,QAInB,SAA4B7F,GACxB,MAAO,CACHqE,eAAgB,kBAAMrE,EAAS4B,MAC/B0G,YAAa,kBAAMtI,EAAS4B,MAC5B2G,kBAAmB,SAACpH,GAAD,OAA0BnB,EAAS4B,EAAyBT,QAIxEN,EAtKf,SAAqBX,GAEjB,IAAMsI,EAAY1G,iBAAO,MACnB2G,EAAY3G,iBAAO,MAGrB+D,EAQA3F,EARA2F,IACAjG,EAOAM,EAPAN,KACAoB,EAMAd,EANAc,QACAjB,EAKAG,EALAH,UACAuI,EAIApI,EAJAoI,YACAhE,EAGApE,EAHAoE,cACAD,EAEAnE,EAFAmE,eACAkE,EACArI,EADAqI,kBAGJ,SAAShE,IACLF,IACArD,EAAQN,KAAK,KAGjB,IAAMgI,EAAsB,CACxB,CACIrI,KAAM,aAAcD,QAAS,WACzBiI,IAAS,EACTC,IACAC,EAAkB,WAClBvH,EAAQN,KAAK,WAGrB,CAAEL,KAAM,mBAAoBD,QAgBhC,WACiB,QAATR,EAAgB+I,EAAY,gBAAiB,CAAC,UAAW,YAC3C,QAAT/I,GAAgB+I,EAAY,gBAAiB,CAAC,SAAU,aAE9C,CAACH,EAAWC,GACpB9F,SAAQ,SAAAE,GACJA,EAAIV,QACZG,UAAY,SAtBnB,CACIjC,KAAM,iBAAkBD,QAAS,WAC7BiI,IAAS,EACT9D,OAKZ,SAASoE,EAAYC,EAAoBC,GAAoB,IAAD,EACxDC,aAAaC,QAAQH,EAAYI,KAAKC,WAAL,oBAC5BJ,EAAQ,GAAK,GADe,eAE5BA,EAAQ,GAAK,GAFe,KAiBrC,SAASK,EAAiBN,EAAoBC,GAC1C,IAAIM,EACmC,EAAlCL,aAAaM,QAAQR,IACtBE,aAAaC,QAAQH,EAAYI,KAAKC,WAAL,oBAC5BJ,EAAQ,GAAK,GADe,eAE5BA,EAAQ,GAAK,GAFe,KAMhChD,IACDsD,EAAoBH,KAAKK,MAAMP,aAAaM,QAAQR,IAEpDE,aAAaC,QAAQH,EAAYI,KAAKC,UAAL,gBAC1BE,EAD0B,gBAE5B7E,EAAgB6E,EAAkB7E,GAAiB,OAI5D2B,GAAaqD,OAAOC,OAAOP,KAAKK,MAAMP,aAAaM,QAAQR,KAG7C,YAAd7I,GAA4BsI,GAWT,YAAdtI,GAAyBwE,KAV9B8D,IAAS,EAEI,QAATzI,EACAsJ,EAAiB,gBAAiB,CAAC,UAAW,YAEhC,QAATtJ,EACLsJ,EAAiB,gBAAiB,CAAC,SAAU,aAE5C3E,KAIT,IAAIiF,EAAkB,CAAC,WAAY,YACtB,QAAT5J,IAAgB4J,EAAkB,CAAC,SAAU,aAEjD,IAAIC,EAAgB,iBAEpB,IAAK5D,EACD,OAAQvB,GACJ,IAAK,UAEGmF,EAAgB,iBAChB,MAER,IAAK,SAEGA,EAAgB,WAChB,MAER,IAAK,WAEGA,EAAgB,iBAChB,MAER,QAASA,EAAgB,iBAIjC,OACI,yBAAKhK,UAAU,eACX,4BAAKgK,GAEL,yBAAKhK,UAAU,WACX,yBAAKA,UAAU,eACX,uBAAGA,UAAU,cAAc+J,EAAgB,IAC3C,uBAAG/J,UAAU,gBACT,0BAAMoD,IAAK2F,GAAYvC,IAAcA,GAAW,IADpD,eAKJ,yBAAKxG,UAAU,mBAEf,yBAAKA,UAAU,eACX,uBAAGA,UAAU,cAAc+J,EAAgB,IAC3C,uBAAG/J,UAAU,gBACT,0BAAMoD,IAAK4F,GAAYxC,IAAcA,GAAW,IADpD,gBAMR,yBAAKxG,UAAU,WACX,kBAAC,EAAD,CACIgB,iBAAkBiI,EAAoBzH,OACtCL,cAAe8H,S,MChIpBgB,OApBf,WACE,OACE,yBAAKjK,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkK,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,UAAWE,IACpC,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,OAAOC,UAAWG,IACpC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,QAAQC,UAAWI,KACrC,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,gBAAgBC,UAAWK,KAC7C,kBAAC,IAAD,CAAUC,GAAG,OAEf,kBAAC,EAAD,MACA,kBAAC,EAAD,SCpBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCfAC,GAAe,CACjB1K,UAAW,OACXuE,cAAe,UACfhD,YAAa,IACbqD,YAAa,UACbC,UAAW,IACXhF,KAAM,WACNsG,WAAY,GACZ1E,YAAa,GACbD,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCsE,KAAK,EACLM,cAAc,GA6FHuE,OA1Ff,WAAyD,IAA/BrJ,EAA8B,uDAAtBoJ,GAAcE,EAAQ,uCAEpD,SAASC,EAAYC,EAAUC,GAC3B,OAAO,gBAAKD,EAAZ,GAAyBC,GAG7B,SAASC,EAAU1J,EAAOiC,GACtB,OAAOsH,EAAYvJ,EAAOiC,GAG9B,SAAS0H,EAAQ3J,EAAOwE,GACpB,OAAO+E,EAAYvJ,EAAO,CAAEtB,UAAW,UAAW8F,QAGtD,SAASoF,EAAU5J,GASf,OAAOuJ,EAAYvJ,EARH,CACZiD,cAAejD,EAAMsD,YACrBrD,YAAaD,EAAMuD,UACnBpD,YAAa,GACbD,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCsE,KAAK,EACLM,cAAc,IAKtB,SAAS+E,IACL,OAAOT,GAGX,SAASU,EAAU9J,EAAOH,GACtB,IAAMkK,EAAmB/J,EAAME,UAAU2D,QAAO,SAAAtC,GAAI,OAAIA,IAAS1B,EAAQuB,MASzE,OAAOmI,EAAYvJ,EALJ,CACXE,UAAW6J,EACX5J,YAJoB,sBAAOH,EAAMG,aAAb,CAA0BN,MAUtD,SAASmK,EAAWhK,EAAOvB,GACvB,OAAO8K,EAAYvJ,EAAOvB,GAG9B,SAASwL,EAAiBjK,EAAOwD,GAC7B,OAAO+F,EAAYvJ,EAAO,CAAE6E,WAAYrB,IAG5C,SAAS0G,EAAWlK,GAChB,IAAImK,EAAa,SAYjB,MAVmB,QAAfnK,EAAMzB,KACN4L,EAAqC,YAAxBnK,EAAMiD,cAA8B,UAAY,UACzC,QAAfjD,EAAMzB,OACX4L,EAAqC,WAAxBnK,EAAMiD,cAA6B,WAAa,UAO1DsG,EAAYvJ,EALC,CAChBC,YAAmC,MAAtBD,EAAMC,YAAsB,IAAM,IAC/CgD,cAAekH,IAMvB,SAASC,EAAgBpK,EAAOF,GAC5B,OAAOyJ,EAAYvJ,EAAO,CAAEtB,UAAWoB,IAG3C,SAASuK,EAAmBrK,EAAOD,GAC/B,OAAOwJ,EAAYvJ,EAAO,CAAE8E,aAAc/E,IAG9C,OAAQuJ,EAAO/K,MACX,KAAKC,EAAwB,OAAOkL,EAAU1J,EAAOsJ,EAAOrH,YAC5D,KAAKzD,EAAsB,OAAOmL,EAAQ3J,EAAOsJ,EAAO9E,KACxD,KAAKhG,EAAwB,OAAOoL,EAAU5J,GAC9C,KAAKxB,EAAyB,OAAOqL,IACrC,KAAKrL,EAAwB,OAAOsL,EAAU9J,EAAOsJ,EAAOzJ,SAC5D,KAAKrB,EAAyB,OAAOwL,EAAWhK,EAAOsJ,EAAO7K,QAC9D,KAAKD,EAA+B,OAAOyL,EAAiBjK,EAAOsJ,EAAO9F,MAC1E,KAAKhF,EAAyB,OAAO0L,EAAWlK,GAChD,KAAKxB,EAA8B,OAAO4L,EAAgBpK,EAAOsJ,EAAOxJ,cACxE,KAAKtB,EAAkC,OAAO6L,EAAmBrK,EAAOsJ,EAAOvJ,QAC/E,QAAS,OAAOC,ICjGlBsK,GAAmBC,+BAAoB,CAAEC,eAAcC,OAAO,EAAMC,WAAY,KAGvEC,GADDC,uBAAYC,GAAkBP,GAAiBQ,2BAAgBC,QCC7EC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,GAAD,SAINQ,SAASC,eAAe,SH0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c11d8b08.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"Header\">\r\n            <h1>Tic Tac Toe</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\n// Icons\r\nimport { FaCopyright } from 'react-icons/fa'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"Footer\">\r\n            <p>\r\n                <FaCopyright />\r\n                <span>Gabriel Cavalcante 2020</span>\r\n            </p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","export default {\r\n    START_GAME: 'START_GAME',\r\n    RESET_GAME: 'RESET_GAME',\r\n    END_GAME: 'END_GAME',\r\n\r\n    RESET_SCOREBOARD: 'RESET_SCOREBOARD',\r\n    UPDATE_PVP_SCOREBOARD: 'UPDATE_PVP_SCOREBOARD',\r\n    UPDATE_PVE_SCOREBOARD: 'UPDATE_PVE_SCOREBOARD',\r\n\r\n    PLACE_TILE: 'PLACE_TILE',\r\n\r\n    VERIFY_WIN: 'VERIFY_WIN',\r\n    VERIFY_TIE: 'VERIFY_TIE',\r\n    \r\n    CHANGE_TURN: 'CHANGE_TURN',\r\n\r\n    CHANGE_GAMESTATE: 'CHANGE_GAMESTATE',\r\n    CHANGE_TYPE: 'CHANGE_TYPE',\r\n\r\n    RESET_STATE: 'RESET_STATE',\r\n\r\n    CHANGE_DIFFICULTY: 'CHANGE_DIFFICULTY',\r\n\r\n    CHANGE_PLAYER_PLAYED: 'CHANGE_PLAYER_PLAYED'\r\n}","import ActionTypes from './actionTypes'\r\n\r\nconst actions = {\r\n    setPvp: () => ({\r\n        type: ActionTypes.CHANGE_TYPE,\r\n        config: { type: 'pvp', gameState: 'pvpConfig' }\r\n    }),\r\n\r\n    setPve: () => ({\r\n        type: ActionTypes.CHANGE_TYPE,\r\n        config: { type: 'pve', gameState: 'pveConfig' }\r\n    })\r\n}\r\n\r\nexport default {\r\n    onSetPvp: () => dispatch => dispatch(actions.setPvp()),\r\n    onSetPve: () => dispatch => dispatch(actions.setPve())\r\n}","import React from 'react'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\ninterface ControlConfig {\r\n    name: string,\r\n    onclick: (...params: any[]) => void\r\n}\r\n\r\nfunction Control(props: ControlConfig) {\r\n    return (\r\n        <button\r\n            className=\"Control\"\r\n            onClick={props.onclick}\r\n        >{props.name}</button>\r\n    )\r\n}\r\n\r\nexport default Control","import React from 'react'\r\n\r\n// Components\r\nimport Control from './Control'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n    numberOfControls: number,\r\n    controlConfig: {\r\n        name: string,\r\n        onclick: () => void\r\n    }[]\r\n}\r\n\r\nfunction Controls(props: Props) {\r\n\r\n    const controls: JSX.Element[] = []\r\n\r\n    for (let i = 0; i < props.numberOfControls; i++) {\r\n        controls.push(\r\n            <Control\r\n                key={i}\r\n                name={props.controlConfig[i].name}\r\n                onclick={props.controlConfig[i].onclick}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"Controls\">\r\n            {controls}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import React from 'react'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport actions from 'store/actions/menu'\r\n\r\n// Components\r\nimport Controls from 'components/UI/Controls'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\nfunction Menu(props: any) {\r\n\r\n    const config = [\r\n        { name: 'Player vs Player', onclick: () => {\r\n            props.onPvp()\r\n            props.history.push('/pvp')\r\n        }},\r\n        { name: 'Player vs Computer', onclick: () => {\r\n            props.onPve()\r\n            props.history.push('/pve')\r\n        }}\r\n    ]    \r\n\r\n    return (\r\n        <div className=\"Menu\">\r\n            <Controls numberOfControls={config.length} controlConfig={config}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onPvp: () => dispatch(actions.onSetPvp()),\r\n        onPve: () => dispatch(actions.onSetPve())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Menu)","import ActionTypes from './actionTypes'\r\n\r\nconst actions = {\r\n    tileClick: newTile => ({ type: ActionTypes.PLACE_TILE, newTile })\r\n}\r\n\r\nexport default {\r\n    tileClick: newTile => dispatch => dispatch(actions.tileClick(newTile))\r\n}","import ActionTypes from './actionTypes'\r\n\r\nconst actions = {\r\n    restartGame: () => ({ type: ActionTypes.RESET_GAME }),\r\n    resetState: () => ({ type: ActionTypes.RESET_STATE }),\r\n    changeGamestate: newGamestate => ({ type: ActionTypes.CHANGE_GAMESTATE, newGamestate }),\r\n    changePlayerPlayed: played => ({ type: ActionTypes.CHANGE_PLAYER_PLAYED, played })\r\n}\r\n\r\nexport default {\r\n    onRestart: () => dispatch => dispatch(actions.restartGame()),\r\n    onReturnToMenu: () => dispatch => dispatch(actions.resetState()),\r\n    onChangeGamestate: newGamestate => dispatch => dispatch(actions.changeGamestate(newGamestate)),\r\n    onChangePlayerPlayed: played => dispatch => dispatch(actions.changePlayerPlayed(played))\r\n}","import React, { useRef } from 'react'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport actions from 'store/actions/tableTile'\r\nimport global from 'store/actions/global'\r\n\r\n// Interfaces\r\nimport StoreState from 'interfaces/store-state'\r\n\r\nfunction TableTile(props: any) {\r\n\r\n    const tileRef = useRef(null)\r\n\r\n    const classes = [\"TableTile\"]\r\n\r\n    if (props.gameState === 'playing')\r\n        if (props.freeTiles.find((el: number) => el === props.id) !== undefined)\r\n            classes.push(\"Placeable\")\r\n\r\n    function onTileClickHandler() {\r\n        if (props.gameState === 'playing') {\r\n            const el = tileRef.current as unknown as HTMLDivElement\r\n            if (el.classList.contains('Placeable')) {\r\n                props.onTileClick({ id: props.id, tile: props.currentTile })\r\n                props.onPlayerPlayed(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    function setElContent(content: string) {\r\n        if (props.gameState === 'playing') {\r\n            const el = tileRef.current as unknown as HTMLDivElement\r\n            if (el.classList.contains('Placeable')) {\r\n                el.innerHTML = content\r\n            }\r\n        }\r\n    }\r\n\r\n    let thisTile = ''\r\n\r\n    props.placedTiles.forEach((tile: { id: number, tile: string }) => {\r\n        if (tile.id === props.id)\r\n            thisTile = tile.tile\r\n    })\r\n\r\n    return (\r\n        <div\r\n            ref={tileRef}\r\n            onMouseEnter={() => setElContent(props.currentTile)}\r\n            onMouseLeave={() => setElContent('')}\r\n            onClick={onTileClickHandler}\r\n            className={classes.join(' ')}\r\n        >{thisTile}</div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n    return {\r\n        gameState: state.gameState,\r\n        currentTile: state.currentTile,\r\n        freeTiles: state.freeTiles,\r\n        placedTiles: state.placedTiles\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onTileClick: (tileId: number) => dispatch(actions.tileClick(tileId)),\r\n        onPlayerPlayed: (played: boolean) => dispatch(global.onChangePlayerPlayed(played))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableTile)","import React from 'react'\r\n\r\n// Components\r\nimport TableTile from 'components/TableTile'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\nfunction GameTable() {\r\n\r\n    const tiles: JSX.Element[] = []\r\n    for (let i = 0; i < 9; i++) {\r\n        tiles.push(\r\n            <TableTile key={i} id={i} />\r\n        )\r\n    }\r\n\r\n    const firstRow = [tiles[0], tiles[1], tiles[2]]\r\n    const secondRow = [tiles[3], tiles[4], tiles[5]]\r\n    const thirdRow = [tiles[6], tiles[7], tiles[8]]\r\n\r\n    return (\r\n        <div className=\"GameTable\">\r\n            <div className=\"TableRow\">{ firstRow }</div>\r\n            <div className=\"TableRow\">{ secondRow }</div>\r\n            <div className=\"TableRow\">{ thirdRow }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameTable","import ActionTypes from './actionTypes'\r\n\r\nconst actions = {\r\n    setGameConfig: config => ({ type: ActionTypes.START_GAME, gameConfig: config })\r\n}\r\n\r\nexport default {\r\n    onSetGameConfig: config => dispatch => dispatch(actions.setGameConfig(config))\r\n}","import React, { useRef, useEffect } from 'react'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\ntype DefaultSelected = \"first\" | \"second\"\r\n\r\ninterface TogglerConfig {\r\n    togglerConfig: {\r\n        name: string,\r\n        onclick: () => void\r\n    }[],\r\n    defaultSelected: DefaultSelected\r\n}\r\n\r\nfunction Togglers(props: TogglerConfig) {\r\n\r\n    const toggler1Ref = useRef(null)\r\n    const toggler2Ref = useRef(null)\r\n\r\n    function toggleRef(reference: React.MutableRefObject<null>, method: string, otherId: number) {\r\n        const el = reference.current as unknown as HTMLButtonElement\r\n        if(method === 'add') el.classList.add('Active')\r\n        else el.classList.remove('Active')\r\n        props.togglerConfig[otherId].onclick()\r\n    }\r\n\r\n    function toggleHandler(reference: React.MutableRefObject<null>) {\r\n        const selectedOpt = reference.current as unknown as HTMLButtonElement\r\n        selectedOpt.classList.add('Active')\r\n\r\n        switch (reference) {\r\n            case toggler1Ref: return toggleRef(toggler2Ref, 'remove', 0)\r\n            case toggler2Ref: return toggleRef(toggler1Ref, 'remove', 1)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        switch (props.defaultSelected) {\r\n            case \"first\": return toggleRef(toggler1Ref, 'add', 0)\r\n            case \"second\": return toggleRef(toggler2Ref, 'add', 1)\r\n        }\r\n    }, [props.defaultSelected]) // eslint-disable-line\r\n\r\n    return (\r\n        <div className=\"Togglers\">\r\n            <button\r\n                ref={toggler1Ref}\r\n                className=\"Toggler\"\r\n                onClick={() => toggleHandler(toggler1Ref)}\r\n            >{props.togglerConfig[0].name}</button>\r\n\r\n            <button\r\n                ref={toggler2Ref}\r\n                className=\"Toggler\"\r\n                onClick={() => toggleHandler(toggler2Ref)}\r\n            >{props.togglerConfig[1].name}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Togglers","import React, { useEffect } from 'react'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport actions from 'store/actions/gameConfig'\r\nimport global from 'store/actions/global'\r\n\r\n// Components\r\nimport Togglers from 'components/UI/Togglers'\r\nimport Controls from 'components/UI/Controls'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\n// Interfaces\r\nimport StoreState from 'interfaces/store-state'\r\n\r\nfunction PvpConfig(props: any) {\r\n\r\n    let currentPlayer = 'player1'\r\n    let currentTile = 'X'\r\n\r\n    function gotoMenu() {\r\n        props.onReturnToMenu()\r\n        props.history.push('/')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.gameState !== 'pvpConfig' || props.type !== 'pvp') gotoMenu()\r\n    }, []) //eslint-disable-line\r\n\r\n    const firstConfig = [\r\n        { name: 'Player 1', onclick: () => currentPlayer = 'player1' },\r\n        { name: 'Player 2', onclick: () => currentPlayer = 'player2' }\r\n    ]\r\n\r\n    const playWithConfig = [\r\n        { name: 'X', onclick: () => currentTile = 'X' },\r\n        { name: 'O', onclick: () => currentTile = 'O' }\r\n    ]\r\n\r\n    const optionsConfig = [\r\n        { name: 'Start game', onclick: startGame },\r\n        { name: 'Return to menu', onclick: gotoMenu }\r\n    ]\r\n\r\n    function startGame() {\r\n        props.onGameStart({ \r\n            currentPlayer, \r\n            currentTile,\r\n            firstPlayer: currentPlayer,\r\n            firstTile: currentTile, \r\n            gameState: 'playing' \r\n        })\r\n        props.history.push('/game')\r\n    }\r\n\r\n    return (\r\n        <div className=\"PvpConfig\">\r\n            <div className=\"configField\">\r\n                <p>Who goes first?</p>\r\n                <Togglers togglerConfig={firstConfig} defaultSelected=\"first\" />\r\n            </div>\r\n\r\n            <div className=\"configField\">\r\n                <p>Play with</p>\r\n                <Togglers togglerConfig={playWithConfig} defaultSelected=\"first\" />\r\n            </div>\r\n\r\n            <div className=\"configField\">\r\n                <Controls\r\n                    numberOfControls={optionsConfig.length}\r\n                    controlConfig={optionsConfig}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n    return {\r\n        gameState: state.gameState,\r\n        type: state.type\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onGameStart: (config: any) => dispatch(actions.onSetGameConfig(config)),\r\n        onReturnToMenu: () => dispatch(global.onReturnToMenu())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PvpConfig)","import ActionTypes from './actionTypes'\r\n\r\nconst actions = {\r\n    setDifficulty: diff => ({ type: ActionTypes.CHANGE_DIFFICULTY, diff })\r\n}\r\n\r\nexport default {\r\n    onSetDifficulty: diff => dispatch => dispatch(actions.setDifficulty(diff))\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { FaCaretDown } from 'react-icons/fa'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport actions from 'store/actions/selector'\r\n\r\n// Interfaces\r\nimport StoreState from 'interfaces/store-state'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\ninterface Option {\r\n    value: string,\r\n    label: string\r\n}\r\n\r\nfunction Selector(props: any) {\r\n\r\n    const { options, defaultValue, gameState, onApplyDifficulty } = props\r\n\r\n    const defaultOption = options\r\n        .filter((option: Option) => option.value === defaultValue)[0]\r\n\r\n    const [label, setLabel] = useState(defaultOption.label)\r\n    const [value, setValue] = useState(defaultOption.value)\r\n    const [openCaret, setOpenCaret] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (gameState === 'pveConfig') onApplyDifficulty(+value)\r\n    }, [value, gameState]) // eslint-disable-line\r\n\r\n    function optionSelected(option: Option) {\r\n        setLabel(option.label)\r\n        setValue(option.value)\r\n        setOpenCaret(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Selector\">\r\n            <div className=\"Selected\" onClick={() => setOpenCaret(!openCaret)}>\r\n                {label}\r\n                <FaCaretDown />\r\n            </div>\r\n\r\n            <div className={[\"Options\", openCaret ? \"Open\" : \"\"].join(' ')}>\r\n                {\r\n                    options.map((option: Option) => (\r\n                        <div\r\n                            key={option.value}\r\n                            className={\r\n                                [\"Option\", option.value === value && \"Current\"].join(' ')\r\n                            }\r\n                            onClick={() => optionSelected(option)}\r\n                        >{option.label}</div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n    return {\r\n        gameState: state.gameState\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onApplyDifficulty: (diff: number) => dispatch(actions.onSetDifficulty(diff)) \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Selector)","import React, { useEffect } from 'react'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport actions from 'store/actions/gameConfig'\r\nimport global from 'store/actions/global'\r\n\r\n// Components\r\nimport Togglers from 'components/UI/Togglers'\r\nimport Controls from 'components/UI/Controls'\r\nimport Selector from 'components/UI/Selector'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\n// Interfaces\r\nimport StoreState from 'interfaces/store-state'\r\n\r\nfunction PveConfig(props: any) {\r\n\r\n    let currentPlayer = 'player'\r\n    let currentTile = 'X'\r\n\r\n    function gotoMenu() {\r\n        props.onReturnToMenu()\r\n        props.history.push('/')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.gameState !== 'pveConfig' || props.type !== 'pve') gotoMenu()\r\n    }, []) //eslint-disable-line\r\n\r\n    const firstConfig = [\r\n        { name: 'Player', onclick: () => currentPlayer = 'player' },\r\n        { name: 'Computer', onclick: () => currentPlayer = 'computer' }\r\n    ]\r\n\r\n    const playWithConfig = [\r\n        { name: 'X', onclick: () => currentTile = 'X' },\r\n        { name: 'O', onclick: () => currentTile = 'O' }\r\n    ]\r\n\r\n    const optionsConfig = [\r\n        { name: 'Start game', onclick: startGame },\r\n        { name: 'Return to menu', onclick: gotoMenu }\r\n    ]\r\n\r\n    const difficultyConfig = [\r\n        { label: 'Easy', value: '0.25' },\r\n        { label: 'Normal', value: '0.50' },\r\n        { label: 'Hard', value: '0.75' },\r\n        { label: 'Very Hard', value: '0.90' },\r\n        { label: 'Expert', value: '1.00' }\r\n    ]\r\n\r\n    function startGame() {\r\n        props.onGameStart({\r\n            currentPlayer,\r\n            currentTile,\r\n            firstPlayer: currentPlayer,\r\n            firstTile: currentTile,\r\n            gameState: 'playing'\r\n        })\r\n        props.history.push('/game')\r\n    }\r\n\r\n    return (\r\n        <div className=\"PveConfig\">\r\n            <div className=\"configField\">\r\n                <p>Who goes first?</p>\r\n                <Togglers togglerConfig={firstConfig} defaultSelected=\"first\" />\r\n            </div>\r\n\r\n            <div className=\"configField\">\r\n                <p>Play with</p>\r\n                <Togglers togglerConfig={playWithConfig} defaultSelected=\"first\" />\r\n            </div>\r\n\r\n            <div className=\"configField\">\r\n                <p>Choose difficulty</p>\r\n                <Selector options={difficultyConfig} defaultValue=\"0.25\" />\r\n            </div>\r\n\r\n            <div className=\"configField\">\r\n                <Controls\r\n                    numberOfControls={optionsConfig.length}\r\n                    controlConfig={optionsConfig}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n    return {\r\n        gameState: state.gameState,\r\n        type: state.type\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onGameStart: (config: any) => dispatch(actions.onSetGameConfig(config)),\r\n        onReturnToMenu: () => dispatch(global.onReturnToMenu())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PveConfig)","import ActionTypes from './actionTypes'\r\n\r\nconst actions = {\r\n    onGameWon: () => ({ type: ActionTypes.END_GAME, tie: false }),\r\n    onGameTied: () => ({ type: ActionTypes.END_GAME, tie: true }),\r\n    onChangeTurn: () => ({ type: ActionTypes.CHANGE_TURN })\r\n}\r\n\r\nexport default {\r\n    onGameWon: () => dispatch => dispatch(actions.onGameWon()),\r\n    onGameTied: () => dispatch => dispatch(actions.onGameTied()),\r\n    onChangeTurn: () => dispatch => dispatch(actions.onChangeTurn())\r\n}","import React, { useEffect, useCallback } from 'react'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport actions from 'store/actions/game'\r\nimport global from 'store/actions/global'\r\nimport TileActions from 'store/actions/tableTile'\r\n\r\n// Interfaces\r\nimport StoreState from 'interfaces/store-state'\r\n\r\n// Components\r\nimport Controls from 'components/UI/Controls'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\nfunction Game(props: any) {\r\n\r\n    const {\r\n        type,\r\n        history,\r\n        freeTiles,\r\n        onGameWon,\r\n        gameState,\r\n        difficulty,\r\n        onGameTied,\r\n        placedTiles,\r\n        currentTile,\r\n        onPlaceTile,\r\n        playerPlayed,\r\n        onChangeTurn,\r\n        onRestartGame,\r\n        currentPlayer,\r\n        onReturnToMenu,\r\n        onPlayerPlayed\r\n    } = props\r\n\r\n    function gotoMenu() {\r\n        onReturnToMenu()\r\n        history.push('/')\r\n    }\r\n\r\n    const gameOptionsConfig = [\r\n        { name: 'Restart Game', onclick: onRestartGame },\r\n        { name: 'Return to Menu', onclick: gotoMenu }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (gameState === 'results') history.push('/game/results')\r\n        else if (gameState !== 'playing') gotoMenu()\r\n    }, [gameState]) // eslint-disable-line\r\n\r\n    function verifyTurnShift() {\r\n        if (currentPlayer !== 'computer') {\r\n            if (playerPlayed) {\r\n                onPlayerPlayed(false)\r\n                onChangeTurn()\r\n            }\r\n        }\r\n        else onChangeTurn()\r\n    }\r\n\r\n    // Game logic\r\n    useEffect(() => {\r\n        if (placedTiles.length >= 5) {\r\n            let win = false\r\n\r\n            function getFilled(checkTiles: number[]) {\r\n                return placedTiles.filter(\r\n                    (tile: { id: number, tile: string }) => checkTiles.includes(tile.id)\r\n                )\r\n            }\r\n\r\n            function verifyRowCol(checkTileInc: number, loopLimit: number, loopInc: number) {\r\n                for (let i = 0; i < loopLimit; i += loopInc) {\r\n                    const filled = getFilled([i, i + checkTileInc, i + (2 * checkTileInc)])\r\n\r\n                    if (filled.length === 3) {\r\n                        const firstTile = filled[0].tile\r\n\r\n                        let equal = 0\r\n\r\n                        filled.forEach((tile: { tile: string }) => {\r\n                            if (tile.tile === firstTile) equal++\r\n                        })\r\n\r\n                        if (equal === 3) {\r\n                            win = true\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function verifyDiagonal(diagonalTiles: number[]) {\r\n                const filled = getFilled(diagonalTiles)\r\n\r\n                if (filled.length === 3) {\r\n                    const firstTile = filled[0].tile\r\n\r\n                    let equal = 0\r\n\r\n                    filled.forEach((tile: { tile: string }) => {\r\n                        if (tile.tile === firstTile) equal++\r\n                    })\r\n\r\n                    if (equal === 3) win = true\r\n                }\r\n            }\r\n\r\n            //Rows\r\n            verifyRowCol(1, 9, 3)\r\n\r\n            // Columns \r\n            if (!win) verifyRowCol(3, 3, 1)\r\n\r\n            // First diagonal\r\n            if (!win) verifyDiagonal([0, 4, 8])\r\n\r\n            // Second diagonal\r\n            if (!win) verifyDiagonal([2, 4, 6])\r\n\r\n            if (win) onGameWon()\r\n            else if (placedTiles.length === 9) onGameTied()\r\n            else verifyTurnShift()\r\n            \r\n        } else verifyTurnShift()\r\n    }, [placedTiles]) // eslint-disable-line\r\n\r\n    const verifySpecifiedWin = useCallback((player: string) => {\r\n\r\n        const otherTile = currentTile === 'X' ? 'O' : 'X'\r\n\r\n        const thisTile = player === currentPlayer ? currentTile : otherTile\r\n\r\n        let played = false\r\n\r\n        function filterFilled(tilesId: number[]) {\r\n            let freetile = [...tilesId]\r\n            return [placedTiles.filter(\r\n                (tile: { id: number, tile: string }) => {\r\n                    freetile = freetile.filter(t => t !== tile.id)\r\n                    return tilesId.includes(tile.id)\r\n                }\r\n            ), freetile]\r\n        }\r\n\r\n        function verifyPlay(checkTileInc: number, loopLimit: number, loopInc: number) {\r\n            for (let i = 0; i < loopLimit; i += loopInc) {\r\n                const [filled, freetile] = filterFilled([i, i + checkTileInc, i + (2 * checkTileInc)])\r\n\r\n                if (filled.length === 2) {\r\n                    let equal = 0\r\n\r\n                    filled.forEach((tile: { tile: string }) => {\r\n                        if (tile.tile === thisTile) equal++\r\n                    })\r\n\r\n                    if (equal === 2) {\r\n                        if (Math.floor(Math.random() * 100) <= (+difficulty * 100)) {\r\n                            const tileIndex = freetile[0]\r\n                            onPlaceTile({ id: tileIndex, tile: currentTile })\r\n                            played = true\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function verifyDiagonal(diagTiles: number[]) {\r\n            const [filled, freetile] = filterFilled(diagTiles)\r\n\r\n            if (filled.length === 2) {\r\n                let equal = 0\r\n\r\n                filled.forEach((tile: { tile: string }) => {\r\n                    if (tile.tile === thisTile) equal++\r\n                })\r\n\r\n                if (equal === 2) {\r\n                    if (Math.floor(Math.random() * 100) <= (+difficulty * 100)) {\r\n                        const tileIndex = freetile[0]\r\n                        onPlaceTile({ id: tileIndex, tile: currentTile })\r\n                        played = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Rows\r\n        verifyPlay(1, 9, 3)\r\n\r\n        // Columns \r\n        if (!played) verifyPlay(3, 3, 1)\r\n\r\n        // First diagonal\r\n        if (!played) verifyDiagonal([0, 4, 8])\r\n\r\n        // Second diagonal\r\n        if (!played) verifyDiagonal([2, 4, 6])\r\n\r\n        return played\r\n    }, [placedTiles, currentTile]) // eslint-disable-line\r\n\r\n    function playRandomly() {\r\n        const randomTileIndex = freeTiles[Math.floor(Math.random() * freeTiles.length)]\r\n        onPlaceTile({ id: randomTileIndex, tile: currentTile })\r\n    }\r\n\r\n    // Computer logic\r\n    useEffect(() => {\r\n        if (type === 'pve' && currentPlayer === 'computer') {\r\n            if (placedTiles.length >= 3) {\r\n                let played = verifySpecifiedWin('computer')\r\n\r\n                if (!played) {\r\n\r\n                    played = verifySpecifiedWin('player')\r\n\r\n                    if (!played) playRandomly()\r\n                }\r\n            } else playRandomly()\r\n        }\r\n    }, [currentPlayer])// eslint-disable-line\r\n\r\n    let playerTurn = 'Your'\r\n\r\n    switch (props.currentPlayer) {\r\n        case 'player1':\r\n            {\r\n                playerTurn = 'Player 1'\r\n                break\r\n            }\r\n        case 'player2':\r\n            {\r\n                playerTurn = 'Player 2'\r\n                break\r\n            }\r\n        case 'computer':\r\n            {\r\n                playerTurn = 'Computer'\r\n                break\r\n            }\r\n        default: playerTurn = 'Your'\r\n    }\r\n\r\n    return (\r\n        <div className=\"Game\">\r\n            <div className=\"GameInfo\">\r\n                <p>{playerTurn} Turn - {props.currentTile}</p>\r\n            </div>\r\n\r\n            <div className=\"GameOptions\">\r\n                <Controls\r\n                    numberOfControls={gameOptionsConfig.length}\r\n                    controlConfig={gameOptionsConfig}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n    return {\r\n        gameState: state.gameState,\r\n        currentPlayer: state.currentPlayer,\r\n        currentTile: state.currentTile,\r\n        placedTiles: state.placedTiles,\r\n        freeTiles: state.freeTiles,\r\n        type: state.type,\r\n        difficulty: state.difficulty,\r\n        playerPlayed: state.playerPlayed\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onReturnToMenu: () => dispatch(global.onReturnToMenu()),\r\n        onRestartGame: () => dispatch(global.onRestart()),\r\n        onPlayerPlayed: (played: boolean) => dispatch(global.onChangePlayerPlayed(played)),\r\n        onChangeTurn: () => dispatch(actions.onChangeTurn()),\r\n        onGameWon: () => dispatch(actions.onGameWon()),\r\n        onGameTied: () => dispatch(actions.onGameTied()),\r\n        onPlaceTile: (tileId: number) => dispatch(TileActions.tileClick(tileId)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)","import React, { useRef } from 'react'\r\n\r\n// Redux connection\r\nimport { connect } from 'react-redux'\r\n\r\n// Actions\r\nimport global from 'store/actions/global'\r\n\r\n// Components\r\nimport Controls from 'components/UI/Controls'\r\n\r\n// CSS styles\r\nimport './styles.css'\r\n\r\n// Interfaces\r\nimport StoreState from 'interfaces/store-state'\r\n\r\ninterface ScoreBoard {\r\n    [key: string]: number\r\n}\r\n\r\nlet scoreboard: number[]\r\nlet loaded = false\r\n\r\nfunction GameResults(props: any) {\r\n\r\n    const score1Ref = useRef(null)\r\n    const score2Ref = useRef(null)\r\n\r\n    const {\r\n        tie,\r\n        type,\r\n        history,\r\n        gameState,\r\n        onPlayAgain,\r\n        currentPlayer,\r\n        onReturnToMenu,\r\n        onChangeGamestate\r\n    } = props\r\n\r\n    function gotoMenu() {\r\n        onReturnToMenu()\r\n        history.push('/')\r\n    }\r\n\r\n    const resultOptionsConfig = [\r\n        {\r\n            name: 'Play again', onclick: () => {\r\n                loaded = false\r\n                onPlayAgain()\r\n                onChangeGamestate('playing')\r\n                history.push('/game')\r\n            }\r\n        },\r\n        { name: 'Reset scoreboard', onclick: resetScoreboard },\r\n        {\r\n            name: 'Return to menu', onclick: () => {\r\n                loaded = false\r\n                gotoMenu()\r\n            }\r\n        }\r\n    ]\r\n\r\n    function resetScores(identifier: string, players: string[]) {\r\n        localStorage.setItem(identifier, JSON.stringify({\r\n            [players[0]]: 0,\r\n            [players[1]]: 0\r\n        }))\r\n    }\r\n\r\n    function resetScoreboard() {\r\n        if (type === 'pvp') resetScores('pvpScoreboard', ['player1', 'player2'])\r\n        else if (type === 'pve') resetScores('pveScoreboard', ['player', 'computer'])\r\n\r\n        const references = [score1Ref, score2Ref]\r\n        references.forEach(ref => {\r\n            const el = ref.current as unknown as HTMLSpanElement\r\n            el.innerHTML = '0'\r\n        })\r\n    }\r\n\r\n    function createScoreboard(identifier: string, players: string[]) {\r\n        let currentScoreboard: ScoreBoard\r\n        if (!localStorage.getItem(identifier)) {\r\n            localStorage.setItem(identifier, JSON.stringify({\r\n                [players[0]]: 0,\r\n                [players[1]]: 0\r\n            }))\r\n        }\r\n\r\n        if (!tie) {\r\n            currentScoreboard = JSON.parse(localStorage.getItem(identifier)!)\r\n\r\n            localStorage.setItem(identifier, JSON.stringify({\r\n                ...currentScoreboard,\r\n                [currentPlayer]: currentScoreboard[currentPlayer] + 1\r\n            }))\r\n        }\r\n\r\n        scoreboard = Object.values(JSON.parse(localStorage.getItem(identifier)!))\r\n    }\r\n\r\n    if (gameState === 'results' && !loaded) {\r\n        loaded = true\r\n\r\n        if (type === 'pvp')\r\n            createScoreboard('pvpScoreboard', ['player1', 'player2'])\r\n\r\n        else if (type === 'pve')\r\n            createScoreboard('pveScoreboard', ['player', 'computer'])\r\n\r\n        else gotoMenu()\r\n    } \r\n    else if (gameState !== 'results') gotoMenu()\r\n\r\n    let showcasePlayers = ['Player 1', 'Player 2']\r\n    if (type === 'pve') showcasePlayers = ['Player', 'Computer']\r\n\r\n    let resultMessage = 'It´s a tie!'\r\n\r\n    if (!tie) {\r\n        switch (currentPlayer) {\r\n            case 'player2':\r\n                {\r\n                    resultMessage = 'Player 2 wins!'\r\n                    break\r\n                }\r\n            case 'player':\r\n                {\r\n                    resultMessage = 'You win!'\r\n                    break\r\n                }\r\n            case 'computer':\r\n                {\r\n                    resultMessage = 'Computer wins!'\r\n                    break\r\n                }\r\n            default: resultMessage = 'Player 1 wins!'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"GameResults\">\r\n            <h2>{resultMessage}</h2>\r\n\r\n            <div className=\"Results\">\r\n                <div className=\"ResultField\">\r\n                    <p className=\"FieldTitle\">{showcasePlayers[0]}</p>\r\n                    <p className=\"FieldContent\">\r\n                        <span ref={score1Ref}>{scoreboard && scoreboard[0]}</span> victories\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"FieldSeparator\"></div>\r\n\r\n                <div className=\"ResultField\">\r\n                    <p className=\"FieldTitle\">{showcasePlayers[1]}</p>\r\n                    <p className=\"FieldContent\">\r\n                        <span ref={score2Ref}>{scoreboard && scoreboard[1]}</span> victories\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Options\">\r\n                <Controls\r\n                    numberOfControls={resultOptionsConfig.length}\r\n                    controlConfig={resultOptionsConfig}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n    return {\r\n        currentPlayer: state.currentPlayer,\r\n        type: state.type,\r\n        gameState: state.gameState,\r\n        tie: state.tie\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    return {\r\n        onReturnToMenu: () => dispatch(global.onReturnToMenu()),\r\n        onPlayAgain: () => dispatch(global.onRestart()),\r\n        onChangeGamestate: (newGamestate: string) => dispatch(global.onChangeGamestate(newGamestate))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults)","import React from 'react'\nimport { Route, Switch, Redirect, HashRouter } from 'react-router-dom'\n\n// Components\nimport Header from 'components/Header'\nimport Footer from 'components/Footer'\n\n// Containers\nimport Menu from 'containers/Menu'\nimport GameTable from 'containers/GameTable'\nimport PvpConfig from 'containers/PvpConfig'\nimport PveConfig from 'containers/PveConfig'\nimport Game from 'containers/Game'\nimport GameResults from 'containers/GameResults'\n\n// CSS styles\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Menu} />\n          <Route exact path=\"/pvp\" component={PvpConfig} />\n          <Route exact path=\"/pve\" component={PveConfig} />\n          <Route exact path=\"/game\" component={Game} />\n          <Route exact path=\"/game/results\" component={GameResults} />\n          <Redirect to=\"/\" />\n        </Switch>\n        <GameTable />\n        <Footer />\n      </HashRouter>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Action types\r\nimport ActionTypes from 'store/actions/actionTypes'\r\n\r\nconst initialState = {\r\n    gameState: 'menu',\r\n    currentPlayer: 'player1',\r\n    currentTile: 'X',\r\n    firstPlayer: 'player1',\r\n    firstTile: 'X',\r\n    type: 'unsetted',\r\n    difficulty: 0.5,\r\n    placedTiles: [],\r\n    freeTiles: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n    tie: false,\r\n    playerPlayed: false\r\n}\r\n\r\nfunction gameLogicReducer(state = initialState, action) {\r\n\r\n    function updateState(oldState, newValues) {\r\n        return { ...oldState, ...newValues }\r\n    }\r\n\r\n    function startGame(state, gameConfig) {\r\n        return updateState(state, gameConfig)\r\n    }\r\n\r\n    function endGame(state, tie) {\r\n        return updateState(state, { gameState: 'results', tie })\r\n    }\r\n\r\n    function resetGame(state) {\r\n        const reseted = {\r\n            currentPlayer: state.firstPlayer,\r\n            currentTile: state.firstTile,\r\n            placedTiles: [],\r\n            freeTiles: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n            tie: false,\r\n            playerPlayed: false\r\n        }\r\n        return updateState(state, reseted)\r\n    }\r\n\r\n    function resetState() {\r\n        return initialState\r\n    }\r\n\r\n    function placeTile(state, newTile) {\r\n        const updatedFreeTiles = state.freeTiles.filter(tile => tile !== newTile.id)\r\n\r\n        const updatedPlacedTiles = [...state.placedTiles, newTile]\r\n\r\n        const update = {\r\n            freeTiles: updatedFreeTiles,\r\n            placedTiles: updatedPlacedTiles\r\n        }\r\n\r\n        return updateState(state, update)\r\n    }\r\n\r\n    function changeType(state, config) {\r\n        return updateState(state, config)\r\n    }\r\n\r\n    function changeDifficulty(state, diff) {\r\n        return updateState(state, { difficulty: diff })\r\n    }\r\n\r\n    function changeTurn(state) {\r\n        let nextPlayer = 'player'\r\n\r\n        if (state.type === 'pvp')\r\n            nextPlayer = state.currentPlayer === 'player1' ? 'player2' : 'player1'\r\n        else if (state.type === 'pve')\r\n            nextPlayer = state.currentPlayer === 'player' ? 'computer' : 'player'\r\n\r\n        const shiftedTurn = {\r\n            currentTile: state.currentTile === 'X' ? 'O' : 'X',\r\n            currentPlayer: nextPlayer\r\n        }\r\n\r\n        return updateState(state, shiftedTurn)\r\n    }\r\n\r\n    function changeGamestate(state, newGamestate) {\r\n        return updateState(state, { gameState: newGamestate })\r\n    }\r\n\r\n    function changePlayerPlayed(state, played) {\r\n        return updateState(state, { playerPlayed: played })\r\n    }\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.START_GAME: return startGame(state, action.gameConfig)\r\n        case ActionTypes.END_GAME: return endGame(state, action.tie)\r\n        case ActionTypes.RESET_GAME: return resetGame(state)\r\n        case ActionTypes.RESET_STATE: return resetState()\r\n        case ActionTypes.PLACE_TILE: return placeTile(state, action.newTile)\r\n        case ActionTypes.CHANGE_TYPE: return changeType(state, action.config)\r\n        case ActionTypes.CHANGE_DIFFICULTY: return changeDifficulty(state, action.diff)\r\n        case ActionTypes.CHANGE_TURN: return changeTurn(state)\r\n        case ActionTypes.CHANGE_GAMESTATE: return changeGamestate(state, action.newGamestate)\r\n        case ActionTypes.CHANGE_PLAYER_PLAYED: return changePlayerPlayed(state, action.played)\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default gameLogicReducer","import thunk from 'redux-thunk'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport GameLogicReducer from 'store/reducers/game-logic'\r\nimport * as gameCreators from 'store/actions/game'\r\n\r\nconst composeEnhancers = composeWithDevTools({ gameCreators, trace: true, traceLimit: 25 })\r\n\r\nconst store = createStore(GameLogicReducer, composeEnhancers(applyMiddleware(thunk)))\r\nexport default store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from 'store/createStore'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}